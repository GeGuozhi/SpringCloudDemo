myisam : 全文索引，不支持事务，表级别锁。
innoDb 5.几版本也支持了。行级锁

sum = 50
update test set sum = sum-1 where sum-1 > 0

隔离级别 : 读未提交，读已提交(Read-Committed : Oracle默认隔离级别)，可重复读(Read-Repeated : MySQL默认隔离级别)，串行

mysql：RR不存在幻读和不可重复读，RC存在不可重复读和幻读

存在问题 : 
    脏读 : 读到了其他事务没有提交的内容。
    不可重复读 : a事务在开启事务之后，先读一部分数据，b事务开启，修改a事务读取的数据，a事务在第二次读取的时候，读到了修改后的数据。
    幻读 : a事务在开启事务之后，先读N条数据数据，b事务开启，增加了符合a事务读取数据条件的M条数据，a事务在第二次读取的时候，读到了
    N+M条数据。
读已提交 : 存在不可重复读，幻读
可重复读 : 存在幻读，在MySQL的innodb引擎中，RR 使用快照读，即在开启事务的时候，每个select都保存一个历史版本，此次修改都在快照版本
上，不会出现幻读的情况。
幻读解决方法 :  
    多版本并发控制(MVCC)
    当前读 : 读取的结果都是最新的，如果存在更新，则事务提交之前，一直阻塞，mysql中一下两种方式是当前读。
        select * from test where id = 1 lock in share mode; 加共享锁可以继续lock in share。
        select * from test where id = 1 for update;加排他锁，不可以再对id=1的数据进行for update。

传播机制 : 7种
1、PROPAGATION_REQUIRED : 如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务，该设置是最常用的设置。
2、PROPAGATION_SUPPORTS : 支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就以非事务执行。
3、PROPAGATION_MANDATORY : 支持当前事务，如果当前存在事务，就加入该事务，如果当前不存在事务，就抛出异常。
4、PROPAGATION_REQUIRES_NEW : 创建新事务，无论当前存不存在事务，都创建新事务。
5、PROPAGATION_NOT_SUPPORTED : 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
6、PROPAGATION_NEVER : 以非事务方式执行，如果当前存在事务，则抛出异常。
7、PROPAGATION_NESTED : 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。

required
required_new  新启事务，与父事务无关联独立提交会滚，父事务异常，不回滚，
never		 不支持报错
supports	 支持，没有也可以
not_supports 不支持，有的话挂起该事务
nested		 和required_new相似，新启事务后，父事务异常，回滚，不过不会重新触发数据源连接，
mandatory 	 强制，没有就报错

mysql主从

Master:
show master status
记录pos以及file

从机：
stop slave

将主机查询的pos,file以及相关信息更新到从库里面

stop slave;
CHANGE MASTER TO MASTER_HOST='192.168.147.1',MASTER_USER='root',MASTER_PASSWORD='Mm123456',MASTER_LOG_FILE='mysql-bin.000031',MASTER_LOG_POS=13965;
start slave;
show slave status

stop slave;
CHANGE MASTER TO MASTER_HOST='172.20.10.6',MASTER_USER='root',MASTER_PASSWORD='Mm123456',MASTER_LOG_FILE='mysql-bin.000031',MASTER_LOG_POS=17598;
start slave;
show slave status

SHOW VARIABLES LIKE 'server_id';
SET GLOBAL server_id=2;


mysql调优：
大表数据优化：
1.优化索引，优化SQL
2.主从复制，读写分裂
3.垂直划分，大服务划分为小服务
4.水平划分，对主键取模划分表，或者用日期划分
5.加缓存Redis

mysql事务原理

redo log:

引入redo log是为了解决mysql将buffer pool数据持久化到磁盘中的过程中出现断电、宕机而导致丢失数据的情况
redo log是用来恢复数据的 用于保障，已提交事务的持久化特性

1.开始事务
2.执行修改语句 --> 为了提高性能，将修改结果存储到buffer pool中，由后台线程同步buffer pool和磁盘
3.同上        --> 将修改结果，存储到redo log buffer中
4.提交事务
5.同步redolog --> 将redo log buffer同步到磁盘，redo log中
6.出现断电宕机 --> 从redo log中读取数据，恢复数据到数据库磁盘中

undo log：
引入undo log是为了解决，执行失败，回滚的操作
undo log会将修改前的数据保存起来，如果发生执行失败，需要会滚，则恢复数据
undo log是用来回滚数据的用于保障 未提交事务的原子性

MVCC multiversion concurrency control 多版本并发控制
MVCC+读写锁 实现事务的隔离性，各个事务对数据库的修改不会相互干扰

redo log决定事务的持久性
undo log决定事务的原子性
mvcc+读写锁决定事务的隔离性

持久性+原子性+隔离性 决定了事务的一致性

redo log也是要存储到磁盘，为什么不直接将buffer pool的数据存储到磁盘中？
1.buffer pool持久化到磁盘是随机的，不是顺序的，为了更快的存储。
2.缓存同步，是以数据页为单位的，大于redo log，因此更容易丢失。

行锁建立在索引上，如果加的行锁所在列不是索引，则升级到表锁

explain


间隙锁：
作用：mysql增加间隙锁是为了解决，幻读
关闭间隙锁的RR 退化为 RC

主键索引和唯一索引，命中空行或者范围，则根据实际数据产生间隙锁，单行，只对单行加锁
一般索引可重复，对行加锁，会产生间隙锁，全部都会产生间隙锁


