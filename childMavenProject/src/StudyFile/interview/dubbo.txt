dubbo:
容错方案：
1.失败重试，常用于查询，会增加消耗时间
2.快速失败，常用于增加
3.失败安全，常用于增加日志
4.失败恢复，后台记录请求失败记录，常用于消息通知
5.并行调用，只要有一个成功即可，但是浪费资源，可以设置forks = 2，控制最大并行数
6.广播调用，调用所有提供者，有一个报错就报错，常用于更新缓存或者本地消息

支持序列化：
默认使用hessian序列化，fastjson，dubbo，java自带序列化

底层是nio 框架 netty

dubbo timeout以及各种参数优先级
函数->接口->消费者->生产者

dubbo通过token令牌防止未经过允许的服务注册，并通过dubbo管理授权服务，可以为服务设置黑白名单来控制调用方

dubbo与springcloud的区别
springcloud是一个生态，依托于spring，springcloud有组件实现rpc(openFeign),hystrix(openFeignHystrix),eureka
dubbo是一个rpc框架，主要关注 服务注册，服务调用，流量分发，流量监控，流量熔断

dubbox是对dubbo进行了升级扩展，增加了服务可进行restful调用

dubbo消费者要比生产者多，是为了压满网卡，避免浪费

dubbo 通信协议 dubbo 协议为什么采用异步单一长连接？
长连接：可以减少握手时间，单一连接：保证单一消费者不会压死提供者，异步，复用线程池，避免c10k问题

dubbo为什么为什么不支持大包，因为大包会影响连接数量

