分布式锁：
    解决使用nginx多机分布式部署，成员变量之间不可见性，不共享性。
分布式锁特点：
    1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；
    2、高可用，高性能的获取锁与释放锁；
    3、具备可重入特性；
    4、具备锁失效机制，防止死锁；
    5、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。

CAP理论，必须从AP(数据一致性)和CP(服务可用性)做出取舍
    consistency 一致性
    availability 可用性
    partition tolerance 分区容错性

分布式锁的三种实现方式：
    基于数据库：
    基于Redis实现：
    基于Zookeeper实现：

基于Redis：
    /**
     * 设置锁，如果已经存在则返回0
     * @param key 使用包名全路径可保持唯一
     * @param value
     * @return
     */
    public boolean lock(String key, String value) {
        Boolean absent = redisTemplate.opsForValue().setIfAbsent(key, value, 60, TimeUnit.SECONDS);
        return absent;
    }

    /**
     * 解锁，如果lua脚本返回为1，则删除key成功，释放锁成功。
     *      如果lua脚本返回为0，则删除锁失败
     * @param key
     * @param value
     * @return
     */
    public boolean unlock(String key,String value){
        Long result = (Long) redisTemplate.execute(defaultRedisScript, Arrays.asList(key,value));
        return RELEASE_SUCCESS.equals(result);
    }

    释放锁使用Lua脚本，可以保证删除的原子性，k-v对，中v需要用无序字符串，lua脚本删除的时候需要提前对比一下value是否相等
    以保证过期key不会删除key，已经重新生成锁并获取到的线程异常。

    del.lua-

    if redis.call("get",KEYS[1]) == KEYS[2]
    then
        return redis.call("del",KEYS[1])
    else
        return 0
    end

基于数据库：




