锁的四种状态：无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态。

synchronized 代码块锁主要由，存在于对象头中的monitor对象的monitorEnter 和 monitorExit指令控制，
当线程 执行 monitorEnter 指令试图获得monitor对象，当计数器为0时可以成功获取，monitorEnter指令将
计数器置为1，当运行到代码块结束时，执行monitorExit指令，将计数器置为0。这个时候其他对象可以获取对象的锁。

synchronized 控制方法使用的时ACCSynchronized访问标识来标识一个方法是否为同步方法，从而执行相应的同步调用。
java早期版本monitor依赖于操作系统的互斥锁实现，而互斥锁从用户态切换到内核态花费时间太久，因此效率低下。

因此1.6引入了大量的优化。如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。

偏向锁：没有竞争的时候，会消除互斥量，增加了效率。但是竞争激烈情况下不能使用偏向锁。应该升级到 轻量级锁。
轻量级锁：没有竞争的时候，会使用cas代替互斥量

wait,notify,notifyAll,join,yield分别有什么作用。
    object方法：
        wait,notify,notifyAll必须在synchronized修饰下才可以调用，否则报错(illegalMonitorStateException)
        wait:放弃当前锁以及cpu,必须其他线程调用锁对象重新调用notify或者notifyAll才可以继续运行。
        notify:随机从等待池中唤醒一个线程，置于锁池，参与锁竞争。
        notifyAll:从等待池中唤醒所有线程，置于锁池，参与锁竞争。
    Thread方法：
        sleep:休眠，放弃cpu，不放弃锁
        join：等待调用线程结束
        yield：放弃当前cpu资源，让优先级高的线程先使用，有可能立马又获取到。
    interrupt:设置中断标识,中断线程(不会立即执行),修改标识为true
    interrupted:查询中断状态，清除中断标志,设置为false,第一次为true。
    isInterrupted:返回中断标识
