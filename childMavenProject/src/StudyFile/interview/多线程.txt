

锁的四种状态：无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态。

synchronized 代码块锁主要由，存在于对象头中的monitor对象的monitorEnter 和 monitorExit指令控制，
当线程 执行 monitorEnter 指令试图获得monitor对象，当计数器为0时可以成功获取，monitorEnter指令将
计数器置为1，当运行到代码块结束时，执行monitorExit指令，将计数器置为0。这个时候其他对象可以获取对象的锁。

synchronized 控制方法使用的时ACCSynchronized访问标识来标识一个方法是否为同步方法，从而执行相应的同步调用。
java早期版本monitor依赖于操作系统的互斥锁实现，而互斥锁从用户态切换到内核态花费时间太久，因此效率低下。

因此1.6引入了大量的优化。如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。

偏向锁：没有竞争的时候，会消除互斥量，增加了效率。但是竞争激烈情况下不能使用偏向锁。应该升级到 轻量级锁。
轻量级锁：没有竞争的时候，会使用cas代替互斥量