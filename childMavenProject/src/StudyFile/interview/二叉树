平衡二叉树(排序且平衡因子(左右子树高度差)小于等
于1)的四种旋转调整方法：

https://blog.csdn.net/jarvan5/article/details/112428036

最小不平衡子树
距离插入节点最近的，并且 BF 的绝对值大于 1 的节点的根节点的子树。

旋转纠正只需要纠正最小不平衡子树即可

LL:插入左子树的左节点--右旋

旧根节点（节点 3）为新根节点（节点 2）的右子树
新根节点的 右子树（如果存在）为旧根节点的左子树

RR:插入右子树的右节点--左旋

旧根节点（节点 1）为新根节点（节点 2）的左子树
新根节点的左子树（如果存在）为旧根节点的右子树

LR 型：插入左孩子的右子树，先左旋，再右旋
1.最小不平衡子树左子树先左旋
2.最小不平衡子树再右旋

RL 型：插入右孩子的左子树，先右旋，再左旋
1.最小不平衡子树根节点右子树先右旋
2.最小不平衡子树再左旋

红黑树：
不会连续两个红
根节点和叶子节点都是黑（Nil以及Null都算子节点）

B树
平衡多叉树

B+树
平衡多叉树，非叶子节点不存储数据，叶子节点为双向链表存储下一个叶子节点的第一个节点

有了平衡二叉树AVL为什么还需要红黑树
1.因为左旋右旋特别耗时，如果频繁增删影响效率，红黑树 插入速度更快，中和之道
2.红黑树在插入、删除等操作，不会像平衡树那样，频繁着破坏红黑树的规则，所以不
需要频繁着调整，这也是我们为什么大多数情况下使用红黑树的原因。