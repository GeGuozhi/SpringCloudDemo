动态代理分为，
jdk动态代理（可以针对接口进行代理）
cglib动态代理（可以针对实现类进行代理）因为已经继承了proxy类，如果对接口进行代理会出现多继承的问题，
java不支持多继承。

动态代理可以对类方法执行前后进行增强，例如日志等，aop为最典型的动态代理实现。（事务）

多态：接口，继承：extends,封装：使用对象

序列化的作用：主要用于通信，传输（可以将类转换为inputStream，进行反序列化将流文件转化为类）
           存储：可以方便的根据序列化后的文件反序列化获取到类

java堆栈区别以及作用：常量池存放在堆里面，所有的对象都存在堆中（存放java对象的内存区域，用于管理动态生命周期的内存区域）
基本数据类型、局部变量都是存放在栈内存中的，用完就消失。
new创建的实例化对象及数组，是存放在堆内存中的，用完之后靠垃圾回收机制不定期自动消除。堆中数据存在共享的情况，存在线程安全
问题

synchronized 关键字
对象中没有加的不会影响到执行,
当一个synchronized方法被调用的时候，其他的synchronized方法都会阻塞。
当一个线程访问对象的同步代码块的时候相当于获得了这个对象锁，其他线程对于该对象的同步块访问都被阻塞。

反射:
        Object obj = new Object();
        Field field = obj.getClass().getSuperclass().getDeclaredField("fieldMapType");
			} catch (NoSuchFieldException | SecurityException e1) {
				throw new RuntimeException("必须包含该属性");
			}
		}
		// 设置是否允许访问，不是修改原来的访问权限修饰词。
		field.setAccessible(true);

		// 属性进行转换后需组装键值
		Object obj1 = field.get(obj);

i++;后面才加上去，当前(i++)=i;
++i;立马加上去，当前(++i)=(i+1)