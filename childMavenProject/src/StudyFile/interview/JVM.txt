8大原子操作

lock unlock read write load use assign store

一、什么情况下会发生栈内存溢出?

1、栈是线程私有的，栈的生命周期和线程一样，每个方法在执行的时候就会创建一个栈帧，它包含局部变量表、操作数栈、动态链接、方法出口等信息，局部变量表又包括基本数据类型和对象的引用;

2、当线程请求的栈深度超过了虚拟机允许的最大深度时，会抛出StackOverFlowError异常，方法递归调用肯可能会出现该问题;

3、调整参数-xss去调整jvm栈的大小

JVM内存模式
jvm将虚拟机分为5大区域，程序计数器、虚拟机栈、本地方法栈、java堆、方法区;
程序计数器：线程私有的，是一块很小的内存空间，作为当前线程的行号指示器，用于记录当前虚拟机正在执行的线程指令地址;

虚拟机栈：线程私有的，每个方法执行的时候都会创建一个栈帧，用于存储局部变量表、操作数、动态链接和方法返回等信息，
当线程请求的栈深度超过了虚拟机允许的最大深度时，就会抛出StackOverFlowError;

本地方法栈：线程私有的，保存的是native方法的信息，当一个jvm创建的线程调用native方法后，jvm不会在虚拟机栈中为
该线程创建栈帧，而是简单的动态链接并直接调用该方法;

堆：java堆是所有线程共享的一块内存，几乎所有对象的实例和数组都要在堆上分配内存，因此该区域经常发生垃圾回收的操作;

方法区：存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码数据。即永久代，在jdk1.8中不存在方法区了，
被元数据区替代了，原方法区被分成两部分;1：加载的类信息，2：运行时常量池;加载的类信息被保存在元数据区中，运行时常量池保存在堆中;

三、JVM中一次完整的GC是什么样子的?对象如何晋升到老年代?
java堆 = 新生代+老年代;新生代 = Eden + Suivivor(S0 + S1)，默认分配比例是8:1:1;当Eden区空间满了的时候
，就会触发一次Minor GC，以收集新生代的垃圾，存活下来的对象会被分配到Survivor区大对象(需要大量连续内存空间的对象)
会直接被分配到老年代如果对象在Eden中出生，并且在经历过一次Minor GC之后仍然存活，被分配到存活区的话，年龄+1，
此后每经历过一次Minor GC并且存活下来，年龄就+1，当年龄达到15的时候，会被晋升到老年代;当老年代满了，
而无法容纳更多对象的话，会触发一次full gc;full gc存储的是整个内存堆(包括年轻代和老年代);;
Major GC是发生在老年代的GC，清理老年区，经常会伴随至少一次minor gc;