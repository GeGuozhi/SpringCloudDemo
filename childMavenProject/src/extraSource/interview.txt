值传递，引用传递。
  1.值传递，指的是作为参数传递出去之后不会改变本身的值。引用传递会改变自身的值，对象，数组，接口
  StringBuffer等。
  2.但是如果对象作为参数传递之后，重新创建了一个对象（数组，接口，StringBuffer等）的话，引用传递不会生效。
  3.String创建之后无法修改，只能new一个出来。
  4。String创建后是不可变的
equals 和 ==
 1.==判断的是对象的地址是否相等，如果是普通类型的话，就是判断值是否相等。
 2.equals正常也是通过==判断的，但是可以重写equals方法来重新决定判断规则，比如String 的eqauls是通过值判断的

集合类：
  Set
    Set去重：首先调用hashCode方法判断该key的散列值是否存在，如果不存在，重新散列到其他位置。如果存在，则调用equals判断
    是否相等，如果相等加入失败，如果不等，加入成功。


  Map
1.Map<K,V> 键值对。
2.Map<K,V> put的过程中，求出key散列值，根据key.hashCode() & (length-1)是否有值，如果没有则设置value为这个值，
如果有的话，则创建一个新的Node<K,V>来存储（解决了hash冲突）
3.hash方法为：
    int hash(Object key){
      int h;
      return (h = key.hashCode()) ^ (h<<<16);
    }
4.HashMap什么时候进行扩容，当它的实际占有长度大于 size*0.75的时候就会进行扩容。每一次put之后都会判断长度是否
超过阈值，如果超过阈值则进行resize扩容，扩容的过程可能位置发生变化。
